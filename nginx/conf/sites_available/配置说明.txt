# 主配置说明
# ss -ln查看backlog长度

# 运行用户
user  www;

# 启动进程,通常设置成和cpu核心的数量相等，或者两倍
worker_processes  4;


# 全局错误日志及PID文件,不写默认为以下文件
error_log  /data/logs/nginx/error.log;
pid        /var/run/nginx.pid;

# 最大打开文件
worker_rlimit_nofile 65535;

events {
    # epoll是多路复用IO(I/O Multiplexing)中的一种方式,仅用于linux2.6以上内核,可以提高性能
    use epoll;
    
    # 单个后台worker process进程的最大并发链接数*worker_processes约等于2~4万
    worker_connections  51200;
}


http {
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 8 128k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
    
    # 设定mime类型,类型由mime.type文件定义，标记文档类型
    include       mime.types;
    default_type  application/octet-stream;
    # 日志格式，参考：http://nginx.org/cn/docs/http/ngx_http_log_module.html#log_format
    log_format  main  '$remote_addr|$time_local|$request|$status|$bytes_sent|$http_referer|$http_user_agent|$request_time|$request_length';
    sendfile        on;
    server_tokens off;

    # 长连接超时时间
    keepalive_timeout  120;

    gzip  on;
    gzip_min_length 1k;
    gzip_buffers 16 64k;
    gzip_http_version 1.1;
    gzip_comp_level 9;
    gzip_types text/plain application/javascript text/css application/xml application/json;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.";
    
    # 设置客户端能够上传文件最大
    client_max_body_size 8M;

    # 提升文件传输性能，必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    
    # http://blog.sina.com.cn/s/blog_5fb60cfa0100dc4a.html
    #tcp_nopush     on;

    # 隐藏nginx版本号
    #server_tokens off;
    
    # 文件描述符缓存http://nginx.org/cn/docs/http/ngx_http_core_module.html#open_file_cache
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    
    # 设定负载均衡的服务器列表
    upstream mysvr {
        #weigth参数表示权值，权值越高被分配到的几率越大
        #本机上的Squid开启3128端口
        server 192.168.8.1:3128 weight=5;
        server 192.168.8.2:80  weight=1;
        server 192.168.8.3:80  weight=6;
    }
    upstream mysvr2 {
        server 192.168.8.x:80  weight=1;
        server 192.168.8.x:80  weight=6;
    }
     
    include sites_enable/*.conf;
}

# 虚拟主机说明
server {
    server_name  domain;
    listen       80;
    
    listen       443 ssl;
    ssl_certificate certs/domain/domain.crt;
    ssl_certificate_key certs/domain/domain.key;
    #ssl_certificate /etc/letsencrypt/live/domain/cert.pem;
    #ssl_certificate_key /etc/letsencrypt/live/domain/privkey.pem;
    
    access_log  /data/logs/nginx/domain_access.log  main;
    error_log   /data/logs/nginx/domain_error.log;
    
    # nginx禁止ip http://blog.csdn.net/qq435792305/article/details/10498999
    # 每行内容 deny 192.168.1.78;
    # 被屏蔽的错误日志格式：2015/02/03 19:56:35 [error] 19004#0: *468773 access forbidden by rule, client: 192.168.1.79,
    # include blocksip.conf;

    location / {
        index  index.html index.htm index.php;
        root   /data/web/domain;
        # 浏览目录
        autoindex on;
    }

    location /nginx_status {
        stub_status on;
        access_log   off;
        #auth_basic    "nginx_status";
        #auth_basic_user_file  conf/htpasswd;
        #allow 192.168.1.110
        #deny all;
    }

    location ~ ^/phpfpm_status$ {
        include fastcgi_params;
        fastcgi_pass unix:/dev/shm/php-fpm.sock;
        fastcgi_param SCRIPT_FILENAME /data/web/web/domain$fastcgi_script_name;
    }
    
    #禁止访问 .htxxx 文件
    #location ~ /\.ht {
    #    deny  all;
    #}
    
    
    # 错误页面链接，默认使用系统404页面
    # 去掉注释可自定义404文件，以下表示web根目录下的errpage文件夹下的404.html文件
    #error_page  404            /errpage/404.html;

    # 定义错误提示页面，
    error_page   500 502 503 504  /50x.html;
        location = /50x.html {
        root   /www/web/error/;#绝对路径
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }


    # 缓存时间
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
        expires 30d;
    }
    
    location ~ .*\.(js|css)?$
    {
        expires 1h;
    }


    location ~ .*.php($|/)
    {
        root /data/web/domain;
        fastcgi_param SCRIPT_FILENAME /data/web/domain$fastcgi_script_name;
        fastcgi_split_path_info ^(.+\.php)(.*)$;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        include fastcgi_params;
        fastcgi_pass unix:/dev/shm/php-fpm.sock;
        fastcgi_index index.php;
    }
    
    # 反向代理
    location / {
        proxy_pass   http://172.31.13.36;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # 以下是一些反向代理的配置可删除.
      proxy_redirect off;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      
      # 后端获取真实 IP 地址
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      
      # 允许客户端请求的最大单文件字节数
      client_max_body_size 10m;
      
      # 缓冲区代理缓冲用户端请求的最大字节数
      client_body_buffer_size 128k;
      
      # nginx跟后端服务器连接超时时间(代理连接超时)
      proxy_connect_timeout 90;
      
      # 后端服务器数据回传时间(代理发送超时)
      proxy_send_timeout 90;
      
      # # 连接成功后，后端服务器响应时间(代理接收超时)
      proxy_read_timeout 90;
      
      # 设置代理服务器（nginx）保存用户头信息的缓冲区大小
      proxy_buffer_size 4k;
      
      # proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
      proxy_buffers 4 32k;
      
      # 高负荷下缓冲大小（proxy_buffers*2）
      proxy_busy_buffers_size 64k;
      
      # 设定缓存文件夹大小，大于这个值，将从 upstream 服务器传
      proxy_temp_file_write_size 64k;
    }
}

http://haili.me/archives/800.html
sendfile可以让sendfile()发挥作用。sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效(更多有关于sendfile)
tcp_nopush告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送
tcp_nodelay告诉nginx不要缓存数据，而是一段一段的发送–当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。

client_header_timeout和client_body_timeout设置请求头和请求体(各自)的超时时间。我们也可以把这个设置低些。
reset_timeout_connection告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
send_timeout指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。

limit_conn_zone设置用于保存各种key（比如当前连接数）的共享内存的参数。5m就是5兆字节，这个值应该被设置的足够大以存储（32K*5）32byte状态或者（16K*5）64byte状态。
limit_conn为给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。

open_file_cache打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。
open_file_cache_valid在open_file_cache中指定检测正确信息的间隔时间。
open_file_cache_min_uses定义了open_file_cache中指令参数不活动时间期间里最小的文件数。
open_file_cache_errors指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模块，这些是在不同文件中定义的。如果你的服务器模块不在这些位置，你就得修改这一行来指定正确的位置。
#优化参考:http://www.howtocn.org/nginx:%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84nginx_fastcgi%E6%9C%8D%E5%8A%A1%E5%99%A8